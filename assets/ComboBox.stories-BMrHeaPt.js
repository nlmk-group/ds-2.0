import{j as e}from"./jsx-runtime-BRNY0I4F.js";import{r as s}from"./index-Bnop-kX6.js";import{al as r,am as q,an as b,ao as P,ap as F,aq as J}from"./TreeList-DpY6ft1X.js";import"./generateUUID-DcAM5OoX.js";import"./index-BtfGMBzk.js";import"./index-DppSdhCO.js";import"./index-ExEzblsB.js";import"./index-CH_Nznxf.js";import"./index-qC5wYQgy.js";import"./index-L_UGJClr.js";import"./index-cR4M_wwG.js";import"./index-FnAFVao7.js";import"./index-nqntSJSg.js";import"./index-DokmLR-l.js";import"./32-X262ygjI.js";import{a as K}from"./argsTypes-kB6H_2yR.js";import"./clsx-B-dksMZM.js";import"./index-D0sJu8id.js";import"./types-CpBSVUgC.js";import"./tiny-invariant-CopsF_GD.js";import"./index-B5g4YLzC.js";const Q="_wrapper_1p2mb_1",U={wrapper:Q},X=t=>e.jsx("div",{className:U.wrapper,children:e.jsx(t,{})}),Le={title:"Components/ComboBox/Stories",component:r,argTypes:K,decorators:[t=>e.jsx(q,{children:e.jsx(t,{})}),X]},l=[{id:"1",label:"Сталь углеродистая"},{id:"2",label:"Сталь легированная"},{id:"3",label:"Чугун серый"},{id:"4",label:"Чугун ковкий"},{id:"5",label:"Алюминиевые сплавы"},{id:"6",label:"Медные сплавы"}],Y=[{id:"g1",label:"Сталь",groupId:"g1",groupLabel:"Сталь"},{id:"1",label:"Сталь 3",groupId:"g1",groupLabel:"Сталь",tooltipDescription:"Ст3сп ГОСТ 380-2005"},{id:"2",label:"Сталь 20",groupId:"g1",groupLabel:"Сталь",tooltipDescription:"Ст20 ГОСТ 1050-2013"},{id:"3",label:"Сталь 45",groupId:"g1",groupLabel:"Сталь",tooltipDescription:"Ст45 ГОСТ 1050-2013"},{id:"g2",label:"Чугун",groupId:"g2",groupLabel:"Чугун"},{id:"4",label:"СЧ 15",groupId:"g2",groupLabel:"Чугун",tooltipDescription:"Серый чугун СЧ15 ГОСТ 1412-85"},{id:"5",label:"СЧ 20",groupId:"g2",groupLabel:"Чугун",tooltipDescription:"Серый чугун СЧ20 ГОСТ 1412-85"},{id:"6",label:"ВЧ 40",groupId:"g2",groupLabel:"Чугун",tooltipDescription:"Высокопрочный чугун ВЧ40 ГОСТ 7293-85"},{id:"g3",label:"Цветные металлы",groupId:"g3",groupLabel:"Цветные металлы"},{id:"7",label:"АЛ2",groupId:"g3",groupLabel:"Цветные металлы",tooltipDescription:"Алюминиевый литейный сплав АЛ2 ГОСТ 1583-93"},{id:"8",label:"ЛС59-1",groupId:"g3",groupLabel:"Цветные металлы",tooltipDescription:"Латунь свинцовая ЛС59-1 ГОСТ 15527-2004"},{id:"9",label:"БрА9Ж3Л",groupId:"g3",groupLabel:"Цветные металлы",tooltipDescription:"Бронза алюминиевая БрА9Ж3Л ГОСТ 493-79"}],Z=[{id:"1",label:"Прокат черных металлов",children:[{id:"2",label:"Сортовой прокат",children:[{id:"3",label:"Круг стальной"},{id:"4",label:"Квадрат стальной"},{id:"5",label:"Шестигранник"}]},{id:"6",label:"Листовой прокат",children:[{id:"7",label:"Лист горячекатаный"},{id:"8",label:"Лист холоднокатаный"},{id:"9",label:"Лист оцинкованный"}]}]},{id:"10",label:"Прокат цветных металлов",children:[{id:"11",label:"Алюминиевый прокат",children:[{id:"12",label:"Лист алюминиевый"},{id:"13",label:"Труба алюминиевая"},{id:"14",label:"Профиль алюминиевый"}]},{id:"15",label:"Медный прокат",children:[{id:"16",label:"Лист медный"},{id:"17",label:"Труба медная"},{id:"18",label:"Пруток медный"}]}]}],$=[{id:"t1",label:"Подсказка 1: Важная информация"},{id:"t2",label:"Подсказка 2: Дополнительные сведения"},{id:"t3",label:"Подсказка 3: Примечание"}],i=()=>{const[t,o]=s.useState([]);return e.jsx(r,{label:"Базовый выбор",children:e.jsx(b,{items:l,onChange:o,isMultiple:!1})})};i.storyName="Базовый выбор одного элемента";const a=()=>{const[t,o]=s.useState([]);return e.jsx(r,{label:"Множественный выбор с поиском",tooltipDescription:"Выберите одну или несколько опций",children:e.jsx(b,{items:l,onChange:o,isMultiple:!0,isSearch:!0,isCheckAll:!0})})};a.storyName="Множественный выбор с поиском";const n=()=>{const[t,o]=s.useState([]),[G,z]=s.useState(l),H=s.useCallback(V=>{z(V)},[]);return e.jsx(r,{label:"Перетаскиваемый список",children:e.jsx(P,{items:G,onChange:o,onReorder:H,isMultiple:!0,droppableId:"draggable-list"})})};n.storyName="Перетаскиваемый список";const p=()=>{const[t,o]=s.useState([]);return e.jsx(r,{label:"Группировка опций",children:e.jsx(F,{items:Y,onChange:o,isMultiple:!0,isSearch:!0,isCheckAll:!0})})};p.storyName="Группировка опций";const c=()=>{const[t,o]=s.useState([]);return e.jsx(r,{label:"Древовидный список",countOnlyLevel:2,children:e.jsx(J,{items:Z,onChange:o,isMultiple:!0,isSearch:!0,isCheckAll:!0,maxLevel:2})})};c.storyName="Древовидный список";const d=()=>{const[t,o]=s.useState([]);return e.jsx(r,{label:"Изменяемый по размеру",isResize:!0,dropdownWidth:300,dropdownHeight:400,dropdownMinWidth:200,dropdownMinHeight:150,children:e.jsx(b,{items:l,onChange:o,isMultiple:!0})})};d.storyName="Изменяемый размер выпадающего списка";const m=()=>{const[t,o]=s.useState([]);return e.jsx(r,{label:"Комбобокс с подсказкой",tooltipDescription:$,children:e.jsx(b,{items:l,onChange:o,isMultiple:!1})})};m.storyName="ComboBox с подсказкой (массив)";const u=()=>{const[t,o]=s.useState([]);return e.jsx(r,{label:"Комбобокс с текстовой подсказкой",tooltipDescription:"Это подробное описание компонента ComboBox с текстовой подсказкой, которая отображается при наведении на компонент",children:e.jsx(b,{items:l,onChange:o,isMultiple:!1})})};u.storyName="ComboBox с текстовой подсказкой (строка)";var g,x,C;i.parameters={...i.parameters,docs:{...(g=i.parameters)==null?void 0:g.docs,source:{originalSource:`() => {
  const [selected, setSelected] = useState<IComboBoxOption[]>([]);
  return <ComboBox label="Базовый выбор">
      <ComboList items={simpleOptions} onChange={setSelected} isMultiple={false} />
    </ComboBox>;
}`,...(C=(x=i.parameters)==null?void 0:x.docs)==null?void 0:C.source}}};var S,h,B;a.parameters={...a.parameters,docs:{...(S=a.parameters)==null?void 0:S.docs,source:{originalSource:`() => {
  const [selected, setSelected] = useState<IComboBoxOption[]>([]);
  return <ComboBox label="Множественный выбор с поиском" tooltipDescription="Выберите одну или несколько опций">
      <ComboList items={simpleOptions} onChange={setSelected} isMultiple={true} isSearch={true} isCheckAll={true} />
    </ComboBox>;
}`,...(B=(h=a.parameters)==null?void 0:h.docs)==null?void 0:B.source}}};var L,O,I;n.parameters={...n.parameters,docs:{...(L=n.parameters)==null?void 0:L.docs,source:{originalSource:`() => {
  const [selected, setSelected] = useState<IComboBoxOption[]>([]);
  const [options, setOptions] = useState<IComboBoxOption[]>(simpleOptions);
  const handleReorder = useCallback((reorderedItems: IComboBoxOption[]) => {
    setOptions(reorderedItems);
  }, []);
  return <ComboBox label="Перетаскиваемый список">
      <ComboDraggableList items={options} onChange={setSelected} onReorder={handleReorder} isMultiple={true} droppableId="draggable-list" />
    </ComboBox>;
}`,...(I=(O=n.parameters)==null?void 0:O.docs)==null?void 0:I.source}}};var D,j,M;p.parameters={...p.parameters,docs:{...(D=p.parameters)==null?void 0:D.docs,source:{originalSource:`() => {
  const [selected, setSelected] = useState<IComboBoxGroupOption[]>([]);
  return <ComboBox label="Группировка опций">
      <ComboGroupList items={groupOptions} onChange={setSelected} isMultiple={true} isSearch={true} isCheckAll={true} />
    </ComboBox>;
}`,...(M=(j=p.parameters)==null?void 0:j.docs)==null?void 0:M.source}}};var w,E,y;c.parameters={...c.parameters,docs:{...(w=c.parameters)==null?void 0:w.docs,source:{originalSource:`() => {
  const [selected, setSelected] = useState<IComboBoxOption[]>([]);
  return <ComboBox label="Древовидный список" countOnlyLevel={2}>
      <ComboTreeList items={treeOptions} onChange={setSelected} isMultiple={true} isSearch={true} isCheckAll={true} maxLevel={2} />
    </ComboBox>;
}`,...(y=(E=c.parameters)==null?void 0:E.docs)==null?void 0:y.source}}};var f,k,A;d.parameters={...d.parameters,docs:{...(f=d.parameters)==null?void 0:f.docs,source:{originalSource:`() => {
  const [selected, setSelected] = useState<IComboBoxOption[]>([]);
  return <ComboBox label="Изменяемый по размеру" isResize={true} dropdownWidth={300} dropdownHeight={400} dropdownMinWidth={200} dropdownMinHeight={150}>
      <ComboList items={simpleOptions} onChange={setSelected} isMultiple={true} />
    </ComboBox>;
}`,...(A=(k=d.parameters)==null?void 0:k.docs)==null?void 0:A.source}}};var R,T,N;m.parameters={...m.parameters,docs:{...(R=m.parameters)==null?void 0:R.docs,source:{originalSource:`() => {
  const [selected, setSelected] = useState<IComboBoxOption[]>([]);
  return <ComboBox label="Комбобокс с подсказкой" tooltipDescription={tooltipItems}>
      <ComboList items={simpleOptions} onChange={setSelected} isMultiple={false} />
    </ComboBox>;
}`,...(N=(T=m.parameters)==null?void 0:T.docs)==null?void 0:N.source}}};var W,v,_;u.parameters={...u.parameters,docs:{...(W=u.parameters)==null?void 0:W.docs,source:{originalSource:`() => {
  const [selected, setSelected] = useState<IComboBoxOption[]>([]);
  return <ComboBox label="Комбобокс с текстовой подсказкой" tooltipDescription="Это подробное описание компонента ComboBox с текстовой подсказкой, которая отображается при наведении на компонент">
      <ComboList items={simpleOptions} onChange={setSelected} isMultiple={false} />
    </ComboBox>;
}`,...(_=(v=u.parameters)==null?void 0:v.docs)==null?void 0:_.source}}};const Oe=["BasicSingleSelect","MultipleSelectWithSearchAndCheckAll","DraggableListExample","GroupedOptionsExample","TreeViewExample","ResizableDropdownExample","TooltipDescriptionExample","TooltipDescriptionStringExample"];export{i as BasicSingleSelect,n as DraggableListExample,p as GroupedOptionsExample,a as MultipleSelectWithSearchAndCheckAll,d as ResizableDropdownExample,m as TooltipDescriptionExample,u as TooltipDescriptionStringExample,c as TreeViewExample,Oe as __namedExportsOrder,Le as default};
