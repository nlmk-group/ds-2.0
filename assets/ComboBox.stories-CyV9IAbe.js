import{j as e}from"./jsx-runtime-BTJTZTIL.js";import{r as l}from"./index-BcJSXhQi.js";import{al as s,am as de,an as r,ao as me,ap as ue,aq as B}from"./TreeList-BgNZ17Gs.js";import{a as be}from"./argsTypes-DR8YX4TM.js";import"./index-ChsGqxH_.js";import"./clsx-B-dksMZM.js";import"./generateUUID-CJxgi7Ha.js";import"./32-BpMTv1cT.js";import"./index-DmffzHLE.js";import"./index-BG4omi31.js";import"./index-DcXliXrs.js";import"./index-D8WlRtvM.js";import"./index-D-jyRV5V.js";import"./index-WHoiTdKD.js";import"./index-BevFGyV5.js";import"./index-DdXvKv-Q.js";import"./types-CpBSVUgC.js";import"./index-VmJK6twV.js";import"./index-CRm92gKC.js";import"./index-DxgC_uyg.js";import"./index-t2lirjGB.js";import"./index-C5rKoyII.js";import"./tiny-invariant-CopsF_GD.js";const he="_wrapper_1p2mb_1",Se={wrapper:he},Ce=o=>e.jsx("div",{className:Se.wrapper,children:e.jsx(o,{})}),He={title:"Components/ComboBox/Stories",component:s,argTypes:be,decorators:[o=>e.jsx(de,{children:e.jsx(o,{})}),Ce]},i=[{id:"1",label:"Сталь углеродистая"},{id:"2",label:"Сталь легированная"},{id:"3",label:"Чугун серый"},{id:"4",label:"Чугун ковкий"},{id:"5",label:"Алюминиевые сплавы"},{id:"6",label:"Медные сплавы"}],xe=[{id:"g1",label:"Сталь",groupId:"g1",groupLabel:"Сталь"},{id:"1",label:"Сталь 3",groupId:"g1",groupLabel:"Сталь",tooltipDescription:"Ст3сп ГОСТ 380-2005"},{id:"2",label:"Сталь 20",groupId:"g1",groupLabel:"Сталь",tooltipDescription:"Ст20 ГОСТ 1050-2013"},{id:"3",label:"Сталь 45",groupId:"g1",groupLabel:"Сталь",tooltipDescription:"Ст45 ГОСТ 1050-2013"},{id:"g2",label:"Чугун",groupId:"g2",groupLabel:"Чугун"},{id:"4",label:"СЧ 15",groupId:"g2",groupLabel:"Чугун",tooltipDescription:"Серый чугун СЧ15 ГОСТ 1412-85"},{id:"5",label:"СЧ 20",groupId:"g2",groupLabel:"Чугун",tooltipDescription:"Серый чугун СЧ20 ГОСТ 1412-85"},{id:"6",label:"ВЧ 40",groupId:"g2",groupLabel:"Чугун",tooltipDescription:"Высокопрочный чугун ВЧ40 ГОСТ 7293-85"},{id:"g3",label:"Цветные металлы",groupId:"g3",groupLabel:"Цветные металлы"},{id:"7",label:"АЛ2",groupId:"g3",groupLabel:"Цветные металлы",tooltipDescription:"Алюминиевый литейный сплав АЛ2 ГОСТ 1583-93"},{id:"8",label:"ЛС59-1",groupId:"g3",groupLabel:"Цветные металлы",tooltipDescription:"Латунь свинцовая ЛС59-1 ГОСТ 15527-2004"},{id:"9",label:"БрА9Ж3Л",groupId:"g3",groupLabel:"Цветные металлы",tooltipDescription:"Бронза алюминиевая БрА9Ж3Л ГОСТ 493-79"}],O=[{id:"1",label:"Прокат черных металлов",children:[{id:"2",label:"Сортовой прокат",children:[{id:"3",label:"Круг стальной",children:[{id:"19",label:"Круг стальной горячекатаный"},{id:"20",label:"Круг стальной калиброванный"},{id:"21",label:"Круг стальной легированный"}]},{id:"4",label:"Квадрат стальной",children:[{id:"22",label:"Квадрат стальной горячекатаный"},{id:"23",label:"Квадрат стальной калиброванный"}]},{id:"5",label:"Шестигранник",children:[{id:"24",label:"Шестигранник стальной горячекатаный"},{id:"25",label:"Шестигранник стальной калиброванный"}]}]},{id:"6",label:"Листовой прокат",children:[{id:"7",label:"Лист горячекатаный",children:[{id:"26",label:"Лист горячекатаный тонкий (до 4 мм)"},{id:"27",label:"Лист горячекатаный толстый (от 4 мм)"},{id:"28",label:"Лист горячекатаный рифленый"}]},{id:"8",label:"Лист холоднокатаный",children:[{id:"29",label:"Лист холоднокатаный тонкий"},{id:"30",label:"Лист холоднокатаный высокой точности"}]},{id:"9",label:"Лист оцинкованный",children:[{id:"31",label:"Лист оцинкованный матовый"},{id:"32",label:"Лист оцинкованный глянцевый"}]}]}]},{id:"10",label:"Прокат цветных металлов",children:[{id:"11",label:"Алюминиевый прокат",children:[{id:"12",label:"Лист алюминиевый",children:[{id:"33",label:"Лист алюминиевый рифленый"},{id:"34",label:"Лист алюминиевый гладкий"},{id:"35",label:"Лист алюминиевый дюралевый"}]},{id:"13",label:"Труба алюминиевая",children:[{id:"36",label:"Труба алюминиевая круглая"},{id:"37",label:"Труба алюминиевая квадратная"},{id:"38",label:"Труба алюминиевая профильная"}]},{id:"14",label:"Профиль алюминиевый",children:[{id:"39",label:"Профиль алюминиевый стандартный"},{id:"40",label:"Профиль алюминиевый конструкционный"},{id:"41",label:"Профиль алюминиевый анодированный"}]}]},{id:"15",label:"Медный прокат",children:[{id:"16",label:"Лист медный",children:[{id:"42",label:"Лист медный мягкий"},{id:"43",label:"Лист медный твердый"},{id:"44",label:"Лист медный полутвердый"}]},{id:"17",label:"Труба медная",children:[{id:"45",label:"Труба медная отожженная"},{id:"46",label:"Труба медная капиллярная"},{id:"47",label:"Труба медная тонкостенная"}]},{id:"18",label:"Пруток медный",children:[{id:"48",label:"Пруток медный круглый"},{id:"49",label:"Пруток медный квадратный"},{id:"50",label:"Пруток медный шестигранный"}]}]}]},{id:"51",label:"Метизная продукция"},{id:"52",label:"Трубный прокат",children:[{id:"53",label:"Трубы стальные"},{id:"57",label:"Трубы нержавеющие"}]}],ge=[{id:"t1",label:"Подсказка 1: Важная информация"},{id:"t2",label:"Подсказка 2: Дополнительные сведения"},{id:"t3",label:"Подсказка 3: Примечание"}],a=()=>{const[o,t]=l.useState([]);return e.jsx(s,{label:"Базовый выбор",children:e.jsx(r,{items:i,onChange:t,isMultiple:!1})})};a.storyName="Базовый выбор одного элемента";const n=()=>{const[o,t]=l.useState([]);return e.jsx(s,{initialValue:[i[0]],label:"Базовый выбор",children:e.jsx(r,{items:i,onChange:t,isMultiple:!1})})};n.storyName="Базовый выбор одного элемента с начальным значением";const c=()=>{const[o,t]=l.useState([]);return e.jsx(s,{initialValue:[i[0],i[1]],label:"Базовый выбор",children:e.jsx(r,{items:i,onChange:t,isMultiple:!0})})};c.storyName="Множественный выбор с начальным значением";const p=()=>{const[o,t]=l.useState([]);return e.jsx(s,{label:"Множественный выбор с поиском",tooltipDescription:"Выберите одну или несколько опций",children:e.jsx(r,{items:i,onChange:t,isMultiple:!0,isSearch:!0,isCheckAll:!0})})};p.storyName="Множественный выбор с поиском";const d=()=>{const[o,t]=l.useState([]),[ae,ne]=l.useState(i),ce=l.useCallback(pe=>{ne(pe)},[]);return e.jsx(s,{label:"Перетаскиваемый список",children:e.jsx(me,{items:ae,onChange:t,onReorder:ce,isMultiple:!0,droppableId:"draggable-list"})})};d.storyName="Перетаскиваемый список";const m=()=>{const[o,t]=l.useState([]);return e.jsx(s,{label:"Группировка опций",children:e.jsx(ue,{items:xe,onChange:t,isMultiple:!0,isSearch:!0,isCheckAll:!0})})};m.storyName="Группировка опций";const u=()=>{const[o,t]=l.useState([]);return e.jsx(s,{label:"Древовидный список",countOnlyLevel:2,children:e.jsx(B,{items:O,onChange:t,isMultiple:!0,isSearch:!0,isCheckAll:!0})})};u.storyName="Древовидный список";const b=()=>{const[o,t]=l.useState([]);return e.jsx(s,{label:"Древовидный список",countOnlyLevel:2,children:e.jsx(B,{items:O,maxLevel:2,onChange:t,isMultiple:!0,isSearch:!0,isCheckAll:!0})})};b.storyName="Древовидный список с ограничением уровня вложенности";const h=()=>{const[o,t]=l.useState([]);return e.jsx(s,{label:"Изменяемый по размеру",isResize:!0,dropdownWidth:300,dropdownHeight:400,dropdownMinWidth:200,dropdownMinHeight:150,children:e.jsx(r,{items:i,onChange:t,isMultiple:!0})})};h.storyName="Изменяемый размер выпадающего списка";const S=()=>{const[o,t]=l.useState([]);return e.jsx(s,{label:"Комбобокс с подсказкой",tooltipDescription:ge,children:e.jsx(r,{items:i,onChange:t,isMultiple:!1})})};S.storyName="ComboBox с подсказкой (массив)";const C=()=>{const[o,t]=l.useState([]);return e.jsx(s,{label:"Комбобокс с текстовой подсказкой",tooltipDescription:"Это подробное описание компонента ComboBox с текстовой подсказкой, которая отображается при наведении на компонент",children:e.jsx(r,{items:i,onChange:t,isMultiple:!1})})};C.storyName="ComboBox с текстовой подсказкой (строка)";const x=()=>{const[o,t]=l.useState([]);return e.jsx(s,{label:"Древовидный список с независимыми чекбоксами",countOnlyLevel:2,children:e.jsx(B,{items:O,onChange:t,isMultiple:!0,isSearch:!0,isCheckAll:!0,checkableSimple:!0})})};x.storyName="Древовидный список с независимыми чекбоксами";const g=()=>{const[o,t]=l.useState([]);return e.jsx(s,{label:"Древовидный список с автофункциями",countOnlyLevel:2,autoFocusSearch:!0,autoExpandOnSearch:!0,tooltipDescription:"При открытии фокус автоматически переходит в поиск, при поиске дерево автоматически раскрывается",children:e.jsx(B,{items:O,onChange:t,isMultiple:!0,isSearch:!0,isCheckAll:!0})})};g.storyName="Древовидный список с автофокусом и автораскрытием";var L,I,M;a.parameters={...a.parameters,docs:{...(L=a.parameters)==null?void 0:L.docs,source:{originalSource:`() => {
  const [selected, setSelected] = useState<IComboBoxOption[]>([]);
  return <ComboBox label="Базовый выбор">
      <ComboList items={simpleOptions} onChange={setSelected} isMultiple={false} />
    </ComboBox>;
}`,...(M=(I=a.parameters)==null?void 0:I.docs)==null?void 0:M.source}}};var j,D,y;n.parameters={...n.parameters,docs:{...(j=n.parameters)==null?void 0:j.docs,source:{originalSource:`() => {
  const [selected, setSelected] = useState<IComboBoxOption[]>([]);
  return <ComboBox initialValue={[simpleOptions[0]]} label="Базовый выбор">
      <ComboList items={simpleOptions} onChange={setSelected} isMultiple={false} />
    </ComboBox>;
}`,...(y=(D=n.parameters)==null?void 0:D.docs)==null?void 0:y.source}}};var w,E,k;c.parameters={...c.parameters,docs:{...(w=c.parameters)==null?void 0:w.docs,source:{originalSource:`() => {
  const [selected, setSelected] = useState<IComboBoxOption[]>([]);
  return <ComboBox initialValue={[simpleOptions[0], simpleOptions[1]]} label="Базовый выбор">
      <ComboList items={simpleOptions} onChange={setSelected} isMultiple={true} />
    </ComboBox>;
}`,...(k=(E=c.parameters)==null?void 0:E.docs)==null?void 0:k.source}}};var T,A,W;p.parameters={...p.parameters,docs:{...(T=p.parameters)==null?void 0:T.docs,source:{originalSource:`() => {
  const [selected, setSelected] = useState<IComboBoxOption[]>([]);
  return <ComboBox label="Множественный выбор с поиском" tooltipDescription="Выберите одну или несколько опций">
      <ComboList items={simpleOptions} onChange={setSelected} isMultiple isSearch isCheckAll />
    </ComboBox>;
}`,...(W=(A=p.parameters)==null?void 0:A.docs)==null?void 0:W.source}}};var V,v,N;d.parameters={...d.parameters,docs:{...(V=d.parameters)==null?void 0:V.docs,source:{originalSource:`() => {
  const [selected, setSelected] = useState<IComboBoxOption[]>([]);
  const [options, setOptions] = useState<IComboBoxOption[]>(simpleOptions);
  const handleReorder = useCallback((reorderedItems: IComboBoxOption[]) => {
    setOptions(reorderedItems);
  }, []);
  return <ComboBox label="Перетаскиваемый список">
      <ComboDraggableList items={options} onChange={setSelected} onReorder={handleReorder} isMultiple droppableId="draggable-list" />
    </ComboBox>;
}`,...(N=(v=d.parameters)==null?void 0:v.docs)==null?void 0:N.source}}};var f,R,_;m.parameters={...m.parameters,docs:{...(f=m.parameters)==null?void 0:f.docs,source:{originalSource:`() => {
  const [selected, setSelected] = useState<IComboBoxGroupOption[]>([]);
  return <ComboBox label="Группировка опций">
      <ComboGroupList items={groupOptions} onChange={setSelected} isMultiple isSearch isCheckAll />
    </ComboBox>;
}`,...(_=(R=m.parameters)==null?void 0:R.docs)==null?void 0:_.source}}};var G,z,F;u.parameters={...u.parameters,docs:{...(G=u.parameters)==null?void 0:G.docs,source:{originalSource:`() => {
  const [selected, setSelected] = useState<IComboBoxOption[]>([]);
  return <ComboBox label="Древовидный список" countOnlyLevel={2}>
      <ComboTreeList items={treeOptions} onChange={setSelected} isMultiple isSearch isCheckAll />
    </ComboBox>;
}`,...(F=(z=u.parameters)==null?void 0:z.docs)==null?void 0:F.source}}};var H,q,P;b.parameters={...b.parameters,docs:{...(H=b.parameters)==null?void 0:H.docs,source:{originalSource:`() => {
  const [selected, setSelected] = useState<IComboBoxOption[]>([]);
  return <ComboBox label="Древовидный список" countOnlyLevel={2}>
      <ComboTreeList items={treeOptions} maxLevel={2} onChange={setSelected} isMultiple isSearch isCheckAll />
    </ComboBox>;
}`,...(P=(q=b.parameters)==null?void 0:q.docs)==null?void 0:P.source}}};var J,K,Q;h.parameters={...h.parameters,docs:{...(J=h.parameters)==null?void 0:J.docs,source:{originalSource:`() => {
  const [selected, setSelected] = useState<IComboBoxOption[]>([]);
  return <ComboBox label="Изменяемый по размеру" isResize={true} dropdownWidth={300} dropdownHeight={400} dropdownMinWidth={200} dropdownMinHeight={150}>
      <ComboList items={simpleOptions} onChange={setSelected} isMultiple />
    </ComboBox>;
}`,...(Q=(K=h.parameters)==null?void 0:K.docs)==null?void 0:Q.source}}};var U,X,Y;S.parameters={...S.parameters,docs:{...(U=S.parameters)==null?void 0:U.docs,source:{originalSource:`() => {
  const [selected, setSelected] = useState<IComboBoxOption[]>([]);
  return <ComboBox label="Комбобокс с подсказкой" tooltipDescription={tooltipItems}>
      <ComboList items={simpleOptions} onChange={setSelected} isMultiple={false} />
    </ComboBox>;
}`,...(Y=(X=S.parameters)==null?void 0:X.docs)==null?void 0:Y.source}}};var Z,$,ee;C.parameters={...C.parameters,docs:{...(Z=C.parameters)==null?void 0:Z.docs,source:{originalSource:`() => {
  const [selected, setSelected] = useState<IComboBoxOption[]>([]);
  return <ComboBox label="Комбобокс с текстовой подсказкой" tooltipDescription="Это подробное описание компонента ComboBox с текстовой подсказкой, которая отображается при наведении на компонент">
      <ComboList items={simpleOptions} onChange={setSelected} isMultiple={false} />
    </ComboBox>;
}`,...(ee=($=C.parameters)==null?void 0:$.docs)==null?void 0:ee.source}}};var te,oe,le;x.parameters={...x.parameters,docs:{...(te=x.parameters)==null?void 0:te.docs,source:{originalSource:`() => {
  const [selected, setSelected] = useState<IComboBoxOption[]>([]);
  return <ComboBox label="Древовидный список с независимыми чекбоксами" countOnlyLevel={2}>
      <ComboTreeList items={treeOptions} onChange={setSelected} isMultiple isSearch isCheckAll checkableSimple />
    </ComboBox>;
}`,...(le=(oe=x.parameters)==null?void 0:oe.docs)==null?void 0:le.source}}};var se,ie,re;g.parameters={...g.parameters,docs:{...(se=g.parameters)==null?void 0:se.docs,source:{originalSource:`() => {
  const [selected, setSelected] = useState<IComboBoxOption[]>([]);
  return <ComboBox label="Древовидный список с автофункциями" countOnlyLevel={2} autoFocusSearch autoExpandOnSearch tooltipDescription="При открытии фокус автоматически переходит в поиск, при поиске дерево автоматически раскрывается">
      <ComboTreeList items={treeOptions} onChange={setSelected} isMultiple isSearch isCheckAll />
    </ComboBox>;
}`,...(re=(ie=g.parameters)==null?void 0:ie.docs)==null?void 0:re.source}}};const qe=["BasicSingleSelect","BasicSingleSelectWithInitialValue","MultipleSelectWithInitialValue","MultipleSelectWithSearchAndCheckAll","DraggableListExample","GroupedOptionsExample","TreeViewExample","TreeViewWithMaxLevelExample","ResizableDropdownExample","TooltipDescriptionExample","TooltipDescriptionStringExample","TreeViewWithSimpleCheckboxesExample","TreeViewWithAutoFeaturesExample"];export{a as BasicSingleSelect,n as BasicSingleSelectWithInitialValue,d as DraggableListExample,m as GroupedOptionsExample,c as MultipleSelectWithInitialValue,p as MultipleSelectWithSearchAndCheckAll,h as ResizableDropdownExample,S as TooltipDescriptionExample,C as TooltipDescriptionStringExample,u as TreeViewExample,g as TreeViewWithAutoFeaturesExample,b as TreeViewWithMaxLevelExample,x as TreeViewWithSimpleCheckboxesExample,qe as __namedExportsOrder,He as default};
