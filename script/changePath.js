const fs = require('fs');
const path = require('path');

const LIB_DIR = path.join(__dirname, '../lib');
const INDEX_FILES = [path.join(LIB_DIR, 'index.js'), path.join(LIB_DIR, 'index.d.ts')];
const NEW_PATH = './dist/components/';

console.log('–ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É –±–∏–±–ª–∏–æ—Ç–µ–∫–∏...');

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –¥–ª—è Windows
function fixWindowsPaths(dir) {
  try {
    const files = fs.readdirSync(dir);

    files.forEach(file => {
      const filePath = path.join(dir, file);
      
      try {
        const stat = fs.statSync(filePath);

        if (stat.isDirectory()) {
          fixWindowsPaths(filePath);
        } else if (file.endsWith('.js') || file.endsWith('.mjs') || file.endsWith('.cjs') || file.endsWith('.d.ts')) {
          const content = fs.readFileSync(filePath, 'utf8');
          
          // –ò—â–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω _polyfill-node:
          if (content.includes('_polyfill-node:')) {
            const updated = content.replace(/(_polyfill-node):/g, '$1_');
            fs.writeFileSync(filePath, updated, 'utf8');
            console.log(`–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—É—Ç–∏ –≤ —Ñ–∞–π–ª–µ: ${filePath}`);
          }
        }
        
        // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Å –ø–æ–ª–∏—Ñ–∏–ª–ª–∞–º–∏
        if (file.includes('_polyfill-node:')) {
          const newFile = file.replace(/:/g, '_');
          const newPath = path.join(dir, newFile);
          fs.renameSync(filePath, newPath);
          console.log(`–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω —Ñ–∞–π–ª: ${file} -> ${newFile}`);
        }
      } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${filePath}:`, err);
      }
    });
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dir}:`, err);
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∏–º–ø–æ—Ä—Ç–∞ –≤ –∏–Ω–¥–µ–∫—Å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
function updateImportPaths() {
  INDEX_FILES.forEach(file => {
    if (fs.existsSync(file)) {
      try {
        const data = fs.readFileSync(file, 'utf-8');
        const newValue = `import './css/main.css';\n\n${data.replaceAll('./', NEW_PATH)}`;
        fs.writeFileSync(file, newValue, 'utf-8');
        console.log(`üìó –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø—É—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞ –≤ ${file.split('/').at(-1)}`);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${file}:`, error);
      }
    } else {
      console.warn(`–§–∞–π–ª ${file} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  });
}

console.log('–®–∞–≥ 1: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –¥–ª—è Windows...');
fixWindowsPaths(LIB_DIR);
console.log('–®–∞–≥ 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∏–º–ø–æ—Ä—Ç–∞...');
updateImportPaths();
console.log('–ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');