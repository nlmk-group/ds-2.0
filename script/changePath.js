const fs = require('fs');
const path = require('path');

const LIB_DIR = path.join(__dirname, '../lib');
const INDEX_FILES = [path.join(LIB_DIR, 'index.js'), path.join(LIB_DIR, 'index.d.ts')];
const NEW_PATH = './dist/components/';

console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∏–º–ø–æ—Ä—Ç–∞...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π –∏–º–ø–æ—Ä—Ç–∞ –≤ –∏–Ω–¥–µ–∫—Å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
function updateImportPaths() {
  INDEX_FILES.forEach(file => {
    if (fs.existsSync(file)) {
      try {
        const data = fs.readFileSync(file, 'utf-8');
        const newValue = `import './css/main.css';\n\n${data.replaceAll('./', NEW_PATH)}`;
        fs.writeFileSync(file, newValue, 'utf-8');
        console.log(`üìó –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø—É—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞ –≤ ${file.split('/').at(-1)}`);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${file}:`, error);
      }
    } else {
      console.warn(`–§–∞–π–ª ${file} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  });
}

updateImportPaths();
console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');